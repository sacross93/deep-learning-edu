#!/usr/bin/env python3
"""
K-평균 클러스터링 퀴즈

이 퀴즈는 K-평균 클러스터링의 핵심 개념, 최적 클러스터 개수 선택,
클러스터 품질 평가 및 결과 해석에 대한 이해도를 확인합니다.

주요 평가 영역:
1. K-평균 알고리즘의 동작 원리
2. 클러스터 개수 선택 방법 (엘보우, 실루엣)
3. 클러스터 품질 평가 지표
4. 클러스터링 결과 해석
5. 비즈니스 적용 시나리오
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.quiz_utils import QuizManager
import numpy as np
import pandas as pd

def create_kmeans_quiz():
    """K-평균 클러스터링 퀴즈 생성"""
    
    quiz_manager = QuizManager("K-평균 클러스터링")
    
    # 문제 1: K-평균 알고리즘 기본 개념
    quiz_manager.add_question(
        question="K-평균 클러스터링 알고리즘의 기본 단계를 올바른 순서로 나열하세요.",
        question_type="multiple_choice",
        options=[
            "초기화 → 할당 → 업데이트 → 수렴 확인",
            "할당 → 초기화 → 업데이트 → 수렴 확인", 
            "초기화 → 업데이트 → 할당 → 수렴 확인",
            "수렴 확인 → 초기화 → 할당 → 업데이트"
        ],
        correct_answer=0,
        explanation="""
K-평균 알고리즘의 올바른 단계는 다음과 같습니다:

1. **초기화**: K개의 중심점을 임의로 선택하거나 k-means++로 초기화
2. **할당**: 각 데이터 포인트를 가장 가까운 중심점의 클러스터에 할당
3. **업데이트**: 각 클러스터의 새로운 중심점을 해당 클러스터 점들의 평균으로 계산
4. **수렴 확인**: 중심점 변화가 임계값 이하이거나 최대 반복 횟수에 도달하면 종료

이 과정을 수렴할 때까지 반복합니다.
        """,
        points=10
    )
    
    # 문제 2: 목적 함수 이해
    quiz_manager.add_question(
        question="K-평균 클러스터링이 최소화하려는 목적 함수는 무엇입니까?",
        question_type="multiple_choice",
        options=[
            "클러스터 간 거리의 합",
            "클러스터 내 제곱합 (WCSS)",
            "클러스터 개수",
            "데이터 포인트 간 평균 거리"
        ],
        correct_answer=1,
        explanation="""
K-평균 클러스터링의 목적 함수는 **클러스터 내 제곱합(Within-Cluster Sum of Squares, WCSS)**입니다.

WCSS = Σᵢ Σₓ∈Cᵢ ||x - cᵢ||²

여기서:
- Cᵢ는 i번째 클러스터
- cᵢ는 i번째 클러스터의 중심점
- x는 클러스터 내의 데이터 포인트

이 값을 최소화함으로써 각 클러스터 내의 데이터 포인트들이 중심점에 가까워지도록 합니다.
        """,
        points=10
    )
    
    # 문제 3: 엘보우 방법
    quiz_manager.add_question(
        question="""
다음은 K 값에 따른 WCSS 값입니다:
K=2: WCSS=1000, K=3: WCSS=600, K=4: WCSS=400, K=5: WCSS=350, K=6: WCSS=320

엘보우 방법에 따른 최적 K 값은?
        """,
        question_type="multiple_choice",
        options=[
            "K=2",
            "K=3", 
            "K=4",
            "K=5"
        ],
        correct_answer=2,
        explanation="""
엘보우 방법은 WCSS 감소율이 급격히 줄어드는 지점을 찾는 방법입니다.

WCSS 감소량을 계산해보면:
- K=2→3: 1000-600 = 400 감소
- K=3→4: 600-400 = 200 감소  
- K=4→5: 400-350 = 50 감소
- K=5→6: 350-320 = 30 감소

K=4에서 감소율이 급격히 줄어들므로(200→50), **K=4**가 엘보우 포인트입니다.

이 지점에서 클러스터를 추가해도 WCSS 개선 효과가 크지 않아 과적합을 방지할 수 있습니다.
        """,
        points=15
    )
    
    # 문제 4: 실루엣 점수 해석
    quiz_manager.add_question(
        question="실루엣 점수가 0.7인 클러스터링 결과를 어떻게 해석해야 합니까?",
        question_type="multiple_choice",
        options=[
            "매우 나쁜 클러스터링",
            "나쁜 클러스터링",
            "좋은 클러스터링", 
            "완벽한 클러스터링"
        ],
        correct_answer=2,
        explanation="""
실루엣 점수는 -1에서 1 사이의 값을 가지며, 다음과 같이 해석됩니다:

- **0.7 이상**: 강한 구조, 매우 좋은 클러스터링
- **0.5~0.7**: 합리적인 구조, 좋은 클러스터링
- **0.25~0.5**: 약한 구조, 보통 클러스터링  
- **0.25 미만**: 구조 없음, 나쁜 클러스터링

따라서 0.7은 **좋은 클러스터링**에 해당합니다.

실루엣 점수 계산:
s(i) = (b(i) - a(i)) / max(a(i), b(i))

- a(i): 같은 클러스터 내 다른 점들과의 평균 거리
- b(i): 가장 가까운 다른 클러스터 점들과의 평균 거리
        """,
        points=10
    )
    
    # 문제 5: k-means++ 초기화
    quiz_manager.add_question(
        question="k-means++ 초기화 방법의 주요 장점은 무엇입니까?",
        question_type="multiple_choice",
        options=[
            "계산 속도가 빠름",
            "메모리 사용량이 적음",
            "초기 중심점들이 서로 멀리 떨어져 있어 수렴 성능이 향상됨",
            "클러스터 개수를 자동으로 결정함"
        ],
        correct_answer=2,
        explanation="""
**k-means++**의 주요 장점은 초기 중심점들이 서로 멀리 떨어져 있도록 선택하는 것입니다.

k-means++ 알고리즘:
1. 첫 번째 중심점을 무작위로 선택
2. 다음 중심점은 기존 중심점들로부터의 거리에 비례하는 확률로 선택
3. K개의 중심점이 모두 선택될 때까지 반복

**장점:**
- 지역 최적해에 빠질 가능성 감소
- 더 빠른 수렴
- 더 안정적인 결과
- 일반적으로 더 좋은 클러스터링 품질

무작위 초기화에 비해 O(log K) 배 더 좋은 결과를 보장합니다.
        """,
        points=10
    )
    
    # 문제 6: 클러스터 해석 (주관식)
    quiz_manager.add_question(
        question="""
고객 세분화에서 다음과 같은 클러스터가 발견되었습니다:

클러스터 A: 연간지출 $8000, 구매빈도 60회, 최근구매 15일전
클러스터 B: 연간지출 $1000, 구매빈도 8회, 최근구매 120일전

각 클러스터의 특성을 설명하고 적절한 마케팅 전략을 제안하세요.
        """,
        question_type="text",
        correct_answer="premium_inactive_strategy",
        explanation="""
**모범 답안:**

**클러스터 A 특성:**
- 고가치 고객 (연간 $8000 지출)
- 높은 구매 빈도 (월 5회)
- 최근 활성 상태 (15일 전 구매)
- → **프리미엄/VIP 고객 세그먼트**

**클러스터 A 마케팅 전략:**
- VIP 고객 프로그램 제공
- 개인화된 프리미엄 서비스
- 로열티 리워드 강화
- 신제품 우선 소개
- 전담 고객 관리자 배정

**클러스터 B 특성:**
- 저가치 고객 (연간 $1000 지출)
- 낮은 구매 빈도 (월 0.7회)
- 비활성 상태 (4개월 전 마지막 구매)
- → **비활성/이탈 위험 고객 세그먼트**

**클러스터 B 마케팅 전략:**
- 윈백 캠페인 실시
- 특별 할인 혜택 제공
- 이탈 원인 분석 및 개선
- 재참여 유도 콘텐츠 제공
- 단계적 관계 회복 프로그램
        """,
        points=20
    )
    
    # 문제 7: 알고리즘 한계
    quiz_manager.add_question(
        question="K-평균 클러스터링의 주요 한계가 아닌 것은?",
        question_type="multiple_choice",
        options=[
            "클러스터 개수를 사전에 지정해야 함",
            "구형 클러스터만 잘 찾음",
            "이상치에 민감함",
            "대용량 데이터 처리가 불가능함"
        ],
        correct_answer=3,
        explanation="""
K-평균 클러스터링의 주요 한계들:

**실제 한계:**
1. **클러스터 개수 사전 지정**: K 값을 미리 알아야 함
2. **구형 클러스터 가정**: 길쭉하거나 복잡한 모양의 클러스터 부적합
3. **이상치 민감성**: 이상치가 중심점 위치에 큰 영향
4. **초기화 민감성**: 초기 중심점에 따라 결과 달라짐
5. **균등한 크기/밀도 가정**: 클러스터 크기나 밀도가 다르면 성능 저하

**한계가 아닌 것:**
- **대용량 데이터 처리**: K-평균은 오히려 대용량 데이터에 적합한 알고리즘입니다
- 시간 복잡도 O(nkt)로 상대적으로 효율적
- Mini-batch K-means 등 대용량 데이터 처리 변형도 존재

따라서 "대용량 데이터 처리가 불가능함"은 K-평균의 한계가 아닙니다.
        """,
        points=10
    )
    
    # 문제 8: 평가 지표 계산
    quiz_manager.add_question(
        question="""
3개 클러스터의 Calinski-Harabasz 지수가 다음과 같습니다:
K=3: CH=150, K=4: CH=120, K=5: CH=180

어떤 K 값이 가장 좋은 클러스터링을 나타냅니까?
        """,
        question_type="multiple_choice",
        options=[
            "K=3",
            "K=4",
            "K=5",
            "판단할 수 없음"
        ],
        correct_answer=2,
        explanation="""
**Calinski-Harabasz (CH) 지수**는 클러스터 간 분산과 클러스터 내 분산의 비율을 측정합니다.

CH = (클러스터 간 분산 / 클러스터 내 분산) × ((n-k)/(k-1))

**해석:**
- **높을수록 좋음**: 클러스터 간 분리도가 높고 클러스터 내 응집도가 높음
- 클러스터가 잘 분리되어 있고 내부적으로 밀집되어 있음을 의미

**주어진 값들:**
- K=3: CH=150
- K=4: CH=120  
- K=5: CH=180 ← **가장 높음**

따라서 **K=5**가 가장 좋은 클러스터링을 나타냅니다.

**참고:** CH 지수는 실루엣 점수와 함께 사용하여 종합적으로 판단하는 것이 좋습니다.
        """,
        points=15
    )
    
    # 문제 9: 데이터 전처리
    quiz_manager.add_question(
        question="K-평균 클러스터링 전에 데이터 정규화가 필요한 이유는?",
        question_type="multiple_choice",
        options=[
            "계산 속도를 높이기 위해",
            "메모리 사용량을 줄이기 위해",
            "스케일이 큰 특성이 거리 계산을 지배하는 것을 방지하기 위해",
            "클러스터 개수를 자동으로 결정하기 위해"
        ],
        correct_answer=2,
        explanation="""
K-평균 클러스터링에서 **데이터 정규화가 필수적인 이유**:

**문제 상황:**
- K-평균은 유클리드 거리를 사용하여 클러스터를 형성
- 특성들의 스케일이 다르면 큰 스케일의 특성이 거리 계산을 지배

**예시:**
- 연봉: $30,000 ~ $100,000 (큰 스케일)
- 나이: 20 ~ 65 (작은 스케일)
- 정규화 없이 거리 계산 시 연봉 차이가 나이 차이를 압도

**해결책:**
- **표준화 (Z-score)**: (x - μ) / σ
- **Min-Max 정규화**: (x - min) / (max - min)
- **Robust Scaling**: 중앙값과 IQR 사용

**효과:**
- 모든 특성이 동등하게 클러스터링에 기여
- 더 의미 있는 클러스터 형성
- 알고리즘 성능 향상
        """,
        points=10
    )
    
    # 문제 10: 비즈니스 적용 시나리오
    quiz_manager.add_question(
        question="""
온라인 쇼핑몰에서 K-평균 클러스터링으로 고객을 세분화했습니다.
다음 중 클러스터링 결과를 비즈니스에 활용하는 가장 적절한 방법은?
        """,
        question_type="multiple_choice",
        options=[
            "모든 고객에게 동일한 마케팅 메시지 발송",
            "클러스터별로 차별화된 마케팅 전략 수립",
            "클러스터 정보를 고객에게 공개",
            "클러스터 개수만큼 제품 카테고리 분류"
        ],
        correct_answer=1,
        explanation="""
**클러스터링 결과의 올바른 비즈니스 활용:**

**정답: 클러스터별로 차별화된 마케팅 전략 수립**

**구체적 활용 방안:**

1. **개인화된 마케팅**
   - 클러스터별 선호도에 맞는 상품 추천
   - 맞춤형 프로모션 및 할인 혜택
   - 개인화된 이메일 마케팅

2. **고객 관리 전략**
   - 고가치 클러스터: VIP 서비스, 로열티 프로그램
   - 신규 고객: 온보딩 프로그램, 첫 구매 인센티브
   - 이탈 위험: 윈백 캠페인, 특별 혜택

3. **제품 및 서비스 개발**
   - 클러스터별 니즈 분석
   - 타겟 세그먼트별 신제품 개발
   - 서비스 개선 우선순위 결정

4. **리소스 배분 최적화**
   - 마케팅 예산 효율적 배분
   - 고객 서비스 리소스 우선순위
   - 재고 관리 및 공급망 최적화

**잘못된 접근:**
- 동일한 메시지: 세분화 효과 없음
- 정보 공개: 개인정보 보호 문제
- 제품 분류: 클러스터와 제품은 다른 차원
        """,
        points=15
    )
    
    return quiz_manager

def main():
    """퀴즈 실행 메인 함수"""
    print("=" * 60)
    print("K-평균 클러스터링 퀴즈")
    print("=" * 60)
    print()
    print("이 퀴즈는 K-평균 클러스터링의 핵심 개념과 실제 적용에 대한")
    print("이해도를 평가합니다.")
    print()
    print("주요 평가 영역:")
    print("- K-평균 알고리즘의 동작 원리")
    print("- 클러스터 개수 선택 방법")
    print("- 클러스터 품질 평가 지표")
    print("- 클러스터링 결과 해석")
    print("- 비즈니스 적용 시나리오")
    print()
    
    # 퀴즈 생성 및 실행
    quiz_manager = create_kmeans_quiz()
    
    # 퀴즈 시작
    quiz_manager.start_quiz()
    
    return quiz_manager

if __name__ == "__main__":
    quiz_manager = main()
    
    # 퀴즈 완료 후 추가 정보
    print("\n" + "=" * 60)
    print("추가 학습 권장사항")
    print("=" * 60)
    print()
    print("1. 이론 복습:")
    print("   - 12_kmeans_theory.md 문서 재검토")
    print("   - 엘보우 방법과 실루엣 분석 비교")
    print("   - k-means++ 초기화 방법 이해")
    print()
    print("2. 실습 연습:")
    print("   - 12_kmeans_practice.py 코드 실행")
    print("   - 다른 K 값으로 실험해보기")
    print("   - 다른 데이터셋으로 클러스터링 시도")
    print()
    print("3. 심화 학습:")
    print("   - Mini-batch K-means 알고리즘")
    print("   - 가우시안 혼합 모델과의 비교")
    print("   - 다른 클러스터링 알고리즘과의 비교")
    print()
    print("4. 실무 적용:")
    print("   - 실제 비즈니스 데이터로 고객 세분화")
    print("   - A/B 테스트를 통한 마케팅 효과 측정")
    print("   - 클러스터링 결과의 안정성 검증")