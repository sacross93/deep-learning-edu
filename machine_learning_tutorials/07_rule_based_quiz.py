"""
규칙 기반 학습 퀴즈

이 퀴즈는 규칙 기반 학습의 핵심 개념, 규칙 품질 지표, 
알고리즘 비교, 실제 적용 시나리오에 대한 이해도를 평가합니다.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))
from quiz_utils import QuizManager

def create_rule_based_quiz():
    """규칙 기반 학습 퀴즈 생성"""
    
    quiz = QuizManager("규칙 기반 학습")
    
    # 문제 1: 기본 개념 이해
    quiz.add_question(
        question="규칙 기반 학습에서 규칙의 기본 구조는 무엇입니까?",
        options=[
            "A) IF 조건부 THEN 결론부",
            "B) WHEN 이벤트 THEN 액션",
            "C) FOR 반복문 DO 실행문", 
            "D) WHILE 조건 DO 반복"
        ],
        correct_answer="A",
        explanation="""
정답: A) IF 조건부 THEN 결론부

규칙 기반 학습에서 규칙은 IF-THEN 형태의 조건부 명제로 표현됩니다.
- IF 부분(조건부/Antecedent): 하나 이상의 속성-값 쌍으로 구성된 전제 조건
- THEN 부분(결론부/Consequent): 예측하고자 하는 클래스나 값

예시: IF (날씨=맑음 AND 습도<70%) THEN (테니스=예)
이러한 구조는 사람이 이해하기 쉽고 해석 가능한 지식을 제공합니다.
        """,
        category="개념 이해"
    )
    
    # 문제 2: 지지도 계산
    quiz.add_question(
        question="""
다음 데이터에서 규칙 'IF 날씨=맑음 THEN 테니스=예'의 지지도는?

데이터 (총 10개):
- 날씨=맑음, 테니스=예: 4개
- 날씨=맑음, 테니스=아니오: 1개  
- 날씨=흐림, 테니스=예: 2개
- 날씨=비, 테니스=아니오: 3개
        """,
        options=[
            "A) 0.4",
            "B) 0.5", 
            "C) 0.6",
            "D) 0.8"
        ],
        correct_answer="A",
        explanation="""
정답: A) 0.4

지지도(Support) = P(조건부 ∪ 결론부) = |조건부 ∪ 결론부| / |전체 데이터|

'날씨=맑음 AND 테니스=예'를 만족하는 데이터: 4개
전체 데이터: 10개
지지도 = 4/10 = 0.4

지지도는 규칙이 전체 데이터에서 얼마나 자주 나타나는지를 나타내며,
규칙의 일반성을 측정하는 지표입니다.
        """,
        category="지표 계산"
    )
    
    # 문제 3: 신뢰도 계산  
    quiz.add_question(
        question="""
위와 같은 데이터에서 규칙 'IF 날씨=맑음 THEN 테니스=예'의 신뢰도는?
        """,
        options=[
            "A) 0.4",
            "B) 0.5",
            "C) 0.6", 
            "D) 0.8"
        ],
        correct_answer="D",
        explanation="""
정답: D) 0.8

신뢰도(Confidence) = P(결론부|조건부) = |조건부 ∪ 결론부| / |조건부|

날씨=맑음인 경우: 4개(테니스=예) + 1개(테니스=아니오) = 5개
이 중 테니스=예인 경우: 4개
신뢰도 = 4/5 = 0.8

신뢰도는 조건부가 만족될 때 결론부가 얼마나 자주 성립하는지를 나타내며,
규칙의 정확성을 측정하는 지표입니다.
        """,
        category="지표 계산"
    )
    
    # 문제 4: 리프트 해석
    quiz.add_question(
        question="""
어떤 규칙의 리프트(Lift) 값이 1.5라면, 이는 무엇을 의미합니까?
        """,
        options=[
            "A) 규칙이 무의미하다",
            "B) 조건부와 결론부가 독립적이다",
            "C) 조건부가 결론부 예측을 1.5배 개선한다",
            "D) 규칙의 신뢰도가 150%이다"
        ],
        correct_answer="C",
        explanation="""
정답: C) 조건부가 결론부 예측을 1.5배 개선한다

리프트(Lift) = 신뢰도 / P(결론부) = P(결론부|조건부) / P(결론부)

리프트 해석:
- Lift > 1: 양의 상관관계, 조건부가 결론부 예측에 도움이 됨
- Lift = 1: 독립적 관계, 조건부가 결론부 예측에 도움이 안 됨  
- Lift < 1: 음의 상관관계, 조건부가 결론부 예측에 방해가 됨

리프트 1.5는 조건부 정보를 사용했을 때 결론부를 예측할 확률이
사전 확률보다 1.5배 높아진다는 의미입니다.
        """,
        category="지표 해석"
    )
    
    # 문제 5: 의사결정나무와의 비교
    quiz.add_question(
        question="""
규칙 기반 학습과 의사결정나무의 주요 차이점은 무엇입니까?
        """,
        options=[
            "A) 규칙 기반은 연속형 데이터만 처리 가능하다",
            "B) 의사결정나무는 해석이 불가능하다", 
            "C) 규칙 기반은 독립적인 규칙들의 집합이고, 의사결정나무는 계층적 구조이다",
            "D) 의사결정나무는 분류만 가능하고 규칙 기반은 회귀만 가능하다"
        ],
        correct_answer="C",
        explanation="""
정답: C) 규칙 기반은 독립적인 규칙들의 집합이고, 의사결정나무는 계층적 구조이다

주요 차이점:
1. 구조:
   - 규칙 기반: 독립적인 IF-THEN 규칙들의 집합
   - 의사결정나무: 계층적 트리 구조

2. 규칙 형태:
   - 규칙 기반: 다양한 조건 조합 가능, 겹치는 규칙 허용
   - 의사결정나무: 경로 기반 규칙만 가능, 상호 배타적 분할

3. 유연성:
   - 규칙 기반: 개별 규칙 수정 용이
   - 의사결정나무: 트리 전체 재구성 필요

둘 다 해석 가능하고 범주형/연속형 데이터 모두 처리 가능합니다.
        """,
        category="알고리즘 비교"
    )
    
    # 문제 6: 규칙 품질 기준
    quiz.add_question(
        question="""
다음 중 좋은 분류 규칙의 조건으로 가장 적절한 것은?
        """,
        options=[
            "A) 높은 지지도, 낮은 신뢰도, 낮은 리프트",
            "B) 낮은 지지도, 높은 신뢰도, 높은 리프트",
            "C) 높은 지지도, 높은 신뢰도, 높은 리프트", 
            "D) 낮은 지지도, 낮은 신뢰도, 높은 리프트"
        ],
        correct_answer="C",
        explanation="""
정답: C) 높은 지지도, 높은 신뢰도, 높은 리프트

좋은 분류 규칙의 조건:

1. 높은 지지도 (Support):
   - 규칙이 충분히 일반적이어야 함
   - 너무 낮으면 특수한 경우에만 적용되는 규칙

2. 높은 신뢰도 (Confidence):  
   - 규칙이 정확해야 함
   - 조건이 만족될 때 결론이 높은 확률로 성립

3. 높은 리프트 (Lift):
   - 규칙이 유용해야 함  
   - 조건 정보가 예측 성능을 실제로 개선

실제로는 이 세 지표 간의 균형을 고려하여 임계값을 설정합니다.
        """,
        category="규칙 평가"
    )
    
    # 문제 7: 실제 적용 시나리오
    quiz.add_question(
        question="""
의료 진단 시스템에서 규칙 기반 학습을 사용할 때 가장 중요한 고려사항은?
        """,
        options=[
            "A) 실행 속도를 최대한 빠르게 한다",
            "B) 규칙의 해석 가능성과 의료진의 검증 가능성을 확보한다",
            "C) 가능한 많은 규칙을 생성한다",
            "D) 복잡한 수학적 모델을 사용한다"
        ],
        correct_answer="B",
        explanation="""
정답: B) 규칙의 해석 가능성과 의료진의 검증 가능성을 확보한다

의료 진단에서 규칙 기반 학습의 중요한 고려사항:

1. 해석 가능성:
   - 의사가 진단 근거를 명확히 이해할 수 있어야 함
   - 환자에게 진단 이유를 설명할 수 있어야 함

2. 검증 가능성:
   - 의료 전문가가 규칙의 의학적 타당성을 검토 가능
   - 잘못된 규칙을 식별하고 수정할 수 있어야 함

3. 신뢰성:
   - 높은 신뢰도를 가진 규칙만 사용
   - 오진의 위험을 최소화

4. 투명성:
   - 의사결정 과정이 투명해야 함
   - 법적, 윤리적 책임 문제 해결

속도나 복잡성보다는 안전성과 신뢰성이 우선입니다.
        """,
        category="실제 적용"
    )
    
    # 문제 8: 규칙 충돌 해결
    quiz.add_question(
        question="""
다음과 같은 상충하는 규칙들이 있을 때, 일반적인 해결 방법은?

규칙1: IF (나이 > 30 AND 소득 > 5000) THEN 신용등급 = 우수 (신뢰도: 0.85)
규칙2: IF (나이 > 30 AND 부채 > 1000) THEN 신용등급 = 불량 (신뢰도: 0.90)

새로운 고객: 나이=35, 소득=6000, 부채=1500
        """,
        options=[
            "A) 첫 번째 규칙을 항상 우선 적용한다",
            "B) 더 높은 신뢰도를 가진 규칙을 적용한다",
            "C) 두 규칙을 모두 무시한다",
            "D) 랜덤하게 하나를 선택한다"
        ],
        correct_answer="B",
        explanation="""
정답: B) 더 높은 신뢰도를 가진 규칙을 적용한다

규칙 충돌 해결 방법들:

1. 신뢰도 기반 우선순위:
   - 더 높은 신뢰도를 가진 규칙 우선 적용
   - 이 경우 규칙2 (신뢰도 0.90) 적용 → 신용등급 = 불량

2. 지지도 기반 우선순위:
   - 더 일반적인 규칙 우선 적용

3. 가중 투표:
   - 여러 규칙의 결과를 품질 지표로 가중 평균

4. 순서 기반:
   - 미리 정의된 규칙 순서에 따라 적용

5. 도메인 지식 기반:
   - 전문가 지식을 바탕으로 우선순위 결정

실제로는 도메인 특성과 비즈니스 요구사항을 고려하여 
가장 적절한 방법을 선택합니다.
        """,
        category="규칙 충돌"
    )
    
    # 문제 9: 규칙 최적화
    quiz.add_question(
        question="""
규칙 기반 시스템의 성능을 향상시키기 위한 방법이 아닌 것은?
        """,
        options=[
            "A) 중복되거나 불필요한 규칙 제거",
            "B) 규칙의 조건부를 더 복잡하게 만들기",
            "C) 임계값 조정을 통한 규칙 품질 개선",
            "D) 도메인 전문가의 지식을 활용한 규칙 검증"
        ],
        correct_answer="B",
        explanation="""
정답: B) 규칙의 조건부를 더 복잡하게 만들기

규칙 기반 시스템 성능 향상 방법:

올바른 방법들:
1. 규칙 정제:
   - 중복, 모순, 불필요한 규칙 제거
   - 규칙 집합의 일관성 확보

2. 임계값 최적화:
   - 지지도, 신뢰도, 리프트 임계값 조정
   - 교차 검증을 통한 최적 임계값 탐색

3. 전문가 지식 활용:
   - 도메인 전문가의 규칙 검증
   - 비즈니스 로직과의 일치성 확인

잘못된 방법:
- 조건부를 복잡하게 만들기:
  * 과적합 위험 증가
  * 해석 가능성 저하
  * 일반화 성능 감소
  * 규칙의 주요 장점인 단순성과 명확성 상실

규칙은 단순하고 이해하기 쉬워야 합니다.
        """,
        category="시스템 최적화"
    )
    
    # 문제 10: 종합 이해도
    quiz.add_question(
        question="""
다음 중 규칙 기반 학습이 다른 머신러닝 방법보다 유리한 상황은?
        """,
        options=[
            "A) 대용량 고차원 데이터 처리가 필요한 경우",
            "B) 복잡한 비선형 패턴 학습이 필요한 경우", 
            "C) 의사결정 과정의 투명성과 설명 가능성이 중요한 경우",
            "D) 최고 수준의 예측 정확도가 필요한 경우"
        ],
        correct_answer="C",
        explanation="""
정답: C) 의사결정 과정의 투명성과 설명 가능성이 중요한 경우

규칙 기반 학습의 주요 장점과 적용 상황:

1. 해석 가능성이 중요한 분야:
   - 의료 진단: 진단 근거 설명 필요
   - 금융: 대출 승인/거부 이유 설명 필요
   - 법률: 판단 근거의 투명성 필요

2. 도메인 지식 통합이 중요한 경우:
   - 전문가 규칙과 데이터 기반 규칙 결합
   - 기존 비즈니스 로직과의 일관성 유지

3. 규제가 엄격한 분야:
   - 설명 가능한 AI 요구사항
   - 알고리즘 투명성 규제

다른 방법이 더 유리한 경우:
- A) 대용량 고차원: 딥러닝, SVM
- B) 복잡한 비선형: 신경망, 앙상블
- D) 최고 정확도: 앙상블, 딥러닝

규칙 기반 학습은 성능보다 해석성이 우선인 상황에서 선택됩니다.
        """,
        category="적용 상황"
    )
    
    return quiz

def main():
    """퀴즈 실행 메인 함수"""
    print("규칙 기반 학습 퀴즈를 시작합니다!")
    print("=" * 50)
    
    # 퀴즈 생성 및 실행
    quiz = create_rule_based_quiz()
    results = quiz.run_quiz()
    
    # 결과 분석
    print("\n" + "=" * 50)
    print("퀴즈 결과 분석")
    print("=" * 50)
    
    total_questions = len(results)
    correct_answers = sum(1 for result in results if result['correct'])
    score = (correct_answers / total_questions) * 100
    
    print(f"총 문제 수: {total_questions}")
    print(f"정답 수: {correct_answers}")
    print(f"점수: {score:.1f}점")
    
    # 카테고리별 성과 분석
    category_stats = {}
    for result in results:
        category = result['category']
        if category not in category_stats:
            category_stats[category] = {'total': 0, 'correct': 0}
        category_stats[category]['total'] += 1
        if result['correct']:
            category_stats[category]['correct'] += 1
    
    print(f"\n카테고리별 성과:")
    for category, stats in category_stats.items():
        accuracy = (stats['correct'] / stats['total']) * 100
        print(f"  {category}: {stats['correct']}/{stats['total']} ({accuracy:.1f}%)")
    
    # 학습 권장사항
    print(f"\n학습 권장사항:")
    if score >= 90:
        print("🎉 훌륭합니다! 규칙 기반 학습을 잘 이해하고 있습니다.")
        print("   다음 단계로 앙상블 학습을 학습해보세요.")
    elif score >= 70:
        print("👍 좋습니다! 기본 개념은 잘 이해하고 있습니다.")
        print("   규칙 품질 지표 계산을 더 연습해보세요.")
    elif score >= 50:
        print("📚 기본기를 더 다져야 합니다.")
        print("   이론 문서를 다시 읽고 실습을 반복해보세요.")
    else:
        print("💪 더 많은 학습이 필요합니다.")
        print("   기본 개념부터 차근차근 다시 학습해보세요.")
    
    # 틀린 문제가 많은 카테고리 식별
    weak_categories = [cat for cat, stats in category_stats.items() 
                      if (stats['correct'] / stats['total']) < 0.7]
    
    if weak_categories:
        print(f"\n보완이 필요한 영역: {', '.join(weak_categories)}")
        
        recommendations = {
            "개념 이해": "규칙 기반 학습의 기본 개념과 구조를 다시 학습하세요.",
            "지표 계산": "지지도, 신뢰도, 리프트 계산 공식을 반복 연습하세요.",
            "지표 해석": "각 지표의 의미와 해석 방법을 명확히 이해하세요.",
            "알고리즘 비교": "의사결정나무와의 차이점을 정리해보세요.",
            "규칙 평가": "좋은 규칙의 조건과 평가 기준을 학습하세요.",
            "실제 적용": "다양한 도메인에서의 적용 사례를 살펴보세요.",
            "규칙 충돌": "규칙 충돌 해결 방법들을 학습하세요.",
            "시스템 최적화": "규칙 기반 시스템 개선 방법을 학습하세요.",
            "적용 상황": "규칙 기반 학습의 장단점과 적용 상황을 정리하세요."
        }
        
        for category in weak_categories:
            if category in recommendations:
                print(f"  - {category}: {recommendations[category]}")

if __name__ == "__main__":
    main()